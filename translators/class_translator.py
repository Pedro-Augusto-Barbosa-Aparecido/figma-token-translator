import os
import sys
import logging
import datetime

import rootpath

from translators.translator import Translator
from utils.validators.validator import PathValidator
from utils.manager import FileManager
from typing import Any


class ClassTranslator(Translator): 
  def __init__(self, json_file_path: str = None, filename: str = None) -> None:
    super(ClassTranslator, self).__init__(json_file_path)
    self._filename = filename

    self._files_paths = []

  def translate(self, output_path: str = "."):
    json_content = self.json

    logging.info("Validating temp folder")
    if PathValidator.validate_path(self.temp_path):
      os.mkdir(self.temp_path)

    for key in json_content.keys():
      filename = f"{key}.py" if not self._filename else f"{self._filename}-{key}.py"
      file_path = os.path.join(self.temp_path, filename)

      if "color" in json_content.keys():
        logging.info("Translating colors!")
        self.add_token_qtd("color", len(json_content["color"].keys()))
        color_filepath = self._translate_colors(json_content["color"], file_path)
        self._files_paths.append(color_filepath)
        logging.info(f"Color File generated on {color_filepath}")

    output_path = rootpath.detect() if output_path == "." else os.path.expanduser("~\\Desktop\\Tokens")
    FileManager.move_files(self.temp_path, output_path)

  def _translate_colors(self, json_content_colors: dict[str, Any], file_path: str) -> str:
      file_path_absoluty = ""
      with open(file_path, "a") as file:
        logging.info(f"Color File created on path {file_path}!!")
        file.write(f"""# ===========================================================
# Generated by Figma Token Translator on {datetime.datetime.now()} 
# 
# This class generate {len(json_content_colors.keys())} colors
# 
# Github of Author: https://github.com/Pedro-Augusto-Barbosa-Aparecido
# ===========================================================\n
        """)
        try:
          colors = json_content_colors.keys()

          file.write("""
class Color:""")

          for color in colors:
                  file.write(f"""
    # {color.capitalize()} section\n""")
                  if list(json_content_colors[color].keys())[0].isdigit():
                      _colors = json_content_colors[color].keys()

                      for _color_intensity in _colors:
                          file.write(f"    {color.upper()}_{_color_intensity} = \"{json_content_colors[color][_color_intensity]['value'].upper()}\"\n")
                  else:
                      file.write(f"    {color.upper()} = \"{json_content_colors[color]['value'].upper()}\"\n")
          file_path_absoluty = os.path.abspath(file.name)
        except Exception as e:
          logging.exception(f"Exception: {e.with_traceback()}")
          sys.exit(-1)

      return file_path_absoluty
